apiVersion: 0.5.0
meta:
  name: flush-experiment
  version: 0.1.0
  namespace: unreal

config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: Beginning

imports:
  - pkg: fluvio/ue-analytics-core@0.0.2
    types:
      - name: attribute
      - name: attribute-list
      - name: analytics-event
  - pkg: fluvio/ue-tudi-analytics@0.0.2
    functions:
      - name: tudi-counter-enhance

dev:
  imports:
    - pkg: fluvio/ue-analytics-core@0.0.1
      path: ../../packages/ue-analytics-core
    - pkg: fluvio/ue-tudi-analytics@0.0.1
      path: ../../packages/ue-tudi-analytics


types:
  event-count:
    type: object
    properties:
      name:
        type: string
      count:
        type: u64

  event-count-tbl:
    type: list
    items:
      type: event-count


topics:
  analytics-enriched:
    name: tudi-analytics-enriched
    schema:
      value:
        type: analytics-event

  analytics-tbl:
    name: tudi-analytics-tbl
    schema:
      key:
        type: string
      value:
        type: event-count-tbl

services:
  event-cnt-flush:
      sources:
        - type: topic
          id: analytics-enriched
      sinks:
        - type: topic
          id: analytics-tbl

      states:
        event-count-state:
          type: keyed-state
          properties:
            key:
              type: string
            value:
              type: arrow-row
              properties:
                count:
                  type: u64

      window:
        tumbling:
          duration: 10s

        assign-timestamp:
          run: |
            fn assign_event_timestamp(_evt: AnalyticsEvent, event_time: i64) -> Result<i64> {
              Ok(event_time)
            }

        partition:
          assign-key:
            run: |
              fn assign_count_key(evt: AnalyticsEvent) -> Result<String> {
                let label = match evt.event_name.as_str() {
                  "AnalyticsSessionStart" => "session_start",
                  "AnalyticsSessionEnd" => "session_end",
                  "jump" => "jump",
                  "sampleLocation" => "sample_location",
                  "mapFault" => "map_fault",
                  _ => "other",
                };
                Ok(label.to_string())
              }

          update-state:
            run: |
              fn update_count(_evt: AnalyticsEvent) -> Result<()>{
                let mut row = event_count_state();
                row.count += 1;
                row.update()?;
                Ok(())
              }

        flush:
          run: |
            fn flush_table() -> Result<EventCountTbl> {
              let cc = sql("SELECT * FROM event_count_state")?;
              let rows = cc.rows()?;
              let name_col = cc.key()?;
              let count_col = cc.col("count")?;

              let mut table: EventCountTbl = vec![];
              while rows.next() {
                let name = rows.str(&name_col)?;
                let count = rows.u64(&count_col)?;
                table.push(EventCount {name, count});
              }
              Ok(table)
            }
