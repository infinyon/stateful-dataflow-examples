apiVersion: 0.5.0
meta:
  name: clickhouse-callout
  version: 0.1.0
  namespace: examples

config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: End

types:
  trip:
    type: object
    properties:
      pu-location-id:
        type: i32
      do-location-id:
        type: i32
      base-passenger-fare:
        type: f64
      airport-fee:
        type: f64
      congestion-surcharge:
        type: f64
      driver-pay:
        type: f64
      sales-tax:
        type: f64
      tips:
        type: f64
      tolls:
        type: f64
      trip-miles:
        type: f64
      trip-time:
        type: i32
      dropoff-datetime:
        type: string

  trip-aggregate:
    type: object
    properties:
      start-time:
        type: i64
      end-time:
        type: i64
      rides:
        type: u32
      fare:
        type: f64
      congestion-fee:
        type: f64
      driver-pay:
        type: f64
      sales-tax:
        type: f64
      tips:
        type: f64
      tolls:
        type: f64
      miles:
        type: f64
      time:
        type: i32
        
topics:
  ny-trips:
    schema:
      value:
        type: trip
  trips-trigger:
    schema:
      value:
        type: i64

services:

  build-trips-tbl:
    sources:
      - type: topic
        id: ny-trips

    states:
      trips-tbl:
        type: keyed-state
        properties:
          key:
            type: string
          value:
            type: arrow-row
            properties:
              pu-location-id: 
                type: i32
              do-location-id: 
                type: i32
              base-passenger-fare:
                type: f64
              airport-fee: 
                type: f64
              congestion-surcharge:
                type: f64
              driver-pay:
                type: f64
              sales-tax:
                type: f64
              tips:
                type: f64
              tolls:
                type: f64
              trip-miles:
                type: f64
              trip-time:
                type: i32
    
    window:
      tumbling:
        duration: 30s

      assign-timestamp:
        dependencies:
          - name: chrono
            version: "0.4.38"
        run: |
          fn assign_event_timestamp(trip: Trip, _event_time: i64) -> Result<i64> {
            use chrono::{DateTime, Utc};
            let datetime: DateTime<Utc> = trip.dropoff_datetime.parse()?;
            Ok(datetime.timestamp_millis())
          }

      partition:
        assign-key:
          dependencies:
            - name: sha2
              version: "0.10.8"
          run: |
            fn assgn_trip_key(trip: Trip) -> Result<String> {
              use sha2::{Sha256, Digest};
              let mut hasher = Sha256::new();
              
              hasher.update(trip.pu_location_id.to_string().as_bytes());
              hasher.update(trip.do_location_id.to_string().as_bytes());
              let hash = format!("{:x}", hasher.finalize());
              let key = hash[..16].to_string();

              Ok(key)
            }

        update-state:
          run: |
            fn update_trips_tbl(trip: Trip) -> Result<()> {
              let mut tt = trips_tbl();
              tt.do_location_id = trip.do_location_id;
              tt.pu_location_id = trip.pu_location_id;
              tt.airport_fee = trip.airport_fee;
              tt.base_passenger_fare = trip.base_passenger_fare;
              tt.congestion_surcharge = trip.congestion_surcharge;
              tt.driver_pay = trip.driver_pay;
              tt.sales_tax = trip.sales_tax;
              tt.tips = trip.tips;
              tt.tolls = trip.tolls;
              tt.trip_miles = trip.trip_miles;
              tt.trip_time = trip.trip_time;
              tt.update()?;

              Ok(())
            }

      flush:
        dependencies:
          - name: chrono
            version: "0.4.38"
        run: |
          fn flush_trips_tbl() -> Result<i64> {
            let now_milis = chrono::Utc::now().timestamp_millis();
            Ok(now_milis)
          }

    sinks:
      - type: topic
        id: trips-trigger

  send-averages-to-clickhouse:
    sources:     
      - type: topic
        id: trips-trigger

    states:
      trips-tbl:
        from: build-trips-tbl.trips-tbl

    transforms:
      - operator: map
        run: |
          fn compute_aggregate(ts_milis: i64) -> Result<TripAggregate> {
            let query = concat!(
              "SELECT ",
                "count(*) as rides, ",
                "sum(`base-passenger-fare`) as fare, ",
                "sum(`congestion-surcharge`) as 'congestion-fee', ",
                "sum(`driver-pay`) as 'driver-pay', ",
                "sum(`sales-tax`) as 'sales-tax', ",
                "sum(tips) as tips, ",
                "sum(tolls) as tolls, ",
                "sum(`trip-miles`) as miles, ",
                "sum(`trip-time`) as time ",
              "FROM trips_tbl ",
              "WHERE `trip-miles` > 0"
            );
            println!("{}", query);
            let trips = sql(query)?;
            let rows = trips.rows()?;
  
            let rides_col = trips.col("rides")?;

            if rows.next() {
              let trip_aggregate = TripAggregate {
                start_time: ts_milis - 30000,
                end_time: ts_milis,
                rides: rows.u32(&rides_col)?,
                fare: rows.f64(&trips.col("fare")?)?,
                congestion_fee: rows.f64(&trips.col("congestion-fee")?)?,
                driver_pay: rows.f64(&trips.col("driver-pay")?)?,
                sales_tax: rows.f64(&trips.col("sales-tax")?)?,
                tips: rows.f64(&trips.col("tips")?)?,
                tolls: rows.f64(&trips.col("tolls")?)?,
                miles: rows.f64(&trips.col("miles")?)?,
                time: rows.i32(&trips.col("time")?)?
              };

              println!("trip_aggregate: {:#?}", trip_aggregate);

              Ok(trip_aggregate)
            } else {
              Err(anyhow::anyhow!("Trips query failed"))
            }
          }
