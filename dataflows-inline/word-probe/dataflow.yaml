apiVersion: 0.5.0
meta:
  name: word-probe
  version: 0.1.0
  namespace: examples

config:
  converter: raw

types:
  word-count:
    type: object
    properties:
      word:
        type: string
      count:
        type: i32

topics:
  sentences:
    schema:
      value:
        type: string
  words:
    schema:
      value:
        type: string
  word-counts:
    schema:
      value:
        converter: json
        type: word-count

services:
  count-words:
    sources:
      - type: topic
        id: sentences

    states:
      count-per-word:
        type: keyed-state
        properties:
          key:
            type: string
          value:
            type: arrow-row
            properties:
              count:
                type: i32

    transforms:
      - operator: flat-map
        run: |
          fn split_sequence(sentence: String) -> Result<Vec<String>> {
            Ok(sentence.split_whitespace().map(String::from).collect())
          }
    partition:
      assign-key:
        run: |
          fn key_by_word(word: String) -> Result<String> {
            Ok(word.to_lowercase().chars().filter(|c| c.is_alphanumeric()).collect())
          }

      update-state:
        run: |
          fn increment_word_count(_word: String) -> Result<()> {
            let mut state = count_per_word();
            state.count += 1;
            state.update()?;
            Ok(())
          }

  lookup-word:
    sources:
      - type: topic
        id: words

    states:
      count-per-word:
        from: count-words.count-per-word

    transforms:
      - operator: map
        run: |
          fn query_word_count(word: String) -> Result<WordCount> {
            let df = count_per_word();
            let count = df.sql(&format!("select * from `count-per-word` where _key = '{}'", word))?;
            let rows = count.rows()?;
            let columns = count.schema(["_key","count"])?;
            match &columns[..] {
              [k,v] => {
                    if rows.next() {
                      let c = rows.i32(&v)?;
                      return Ok(WordCount{word, count: c})
                    } else {
                      return Ok(WordCount{word, count: 0})
                    }      
                },
                  _ => panic!("unexpected schema"),
              }
          }

    sinks:
      - type: topic
        id: word-counts
