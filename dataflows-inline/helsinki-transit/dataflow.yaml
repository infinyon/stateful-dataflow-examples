# Perform word count on sentences in non windowed transformation

apiVersion: 0.4.0
meta:
  name: helsinki-stat
  version: 0.1.0
  namespace: my-org

config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: End

types:
  # VP is the vehicle position
  vp:
    type: object
    properties:
      vehicle:
        type: i32
      tst:
        type: string
      speed:
        type: f64
      lat:
        type: f64
      long:
        type: f64
      route:
        type: string

  vehicle-count:
    type: object
    properties:
      vehicle:
        type: i32
      speed:
        type: f64

  vp-stat:
    type: object
    properties:
      vehicle:
        type: string
      speed:
        type: f64

  top-vehicle:
    type: list
    items:
      type: vp-stat

topics:
  events:
    name: helsinki
    schema:
      value:
        type: string
        converter: raw

  top-vehicle:
    name: top-vehicle
    schema:
      value:
        type: top-vehicle

services:
  read-transit:
    sources:
      - type: topic
        id: events
    states:
      vehicle-stat:
        type: keyed-state
        properties:
          key:
            type: u32
          value:
            type: arrow-row
            properties:
              events:
                type: i32
              speed:
                type: f64
              route:
                type: string

    transforms:
      - operator: filter-map
        dependencies:
          - name: serde_json
            version: "1.0.60"
        run: |
          fn parse_event(event: String) -> Result<Option<Vp>, String> {

              match serde_json::from_str(&event) {
                Ok(vp) => Ok(Some(vp)),
                Err(e) => {
                  println!("Failed to parse event: {}", e);
                  Ok(None)
                }
              }

          }

    window:
      tumbling:
        duration: 5s

      assign-timestamp:
        dependencies:
          - name: chrono
            version: "0.4.23"
          - name: anyhow
            version: "1.0.38"
        run: |
          fn assign_timestamp(event: Vp, _event_time: i64) -> Result<i64, String> {

              use chrono::{DateTime, FixedOffset};

              fn parse_utc(timestamp: &str) -> anyhow::Result<i64> {
                  let time = DateTime::<FixedOffset>::parse_from_str(timestamp, "%+")
                      .map_err(|err| anyhow::anyhow!("time parse error: {}", err))?;
                  Ok(time.timestamp_millis())
              }

            parse_utc(&event.tst).map_err(|e| e.to_string())
          }

      partition:
        assign-key:
          run: |
            fn assign_key(event: Vp) -> Result<String, String> {
              Ok(event.vehicle.to_string())
            }

        update-state:
          run: |
            fn update_speed(event: Vp) -> Result<(), String> {
              let mut veh = vehicle_stat();
              veh.events += 1;
              veh.route = event.route.clone();
              veh.speed = (veh.speed + event.speed) / 2.0f64;
              veh.update()?;
              Ok(())
            }

      flush:
        run: |
          fn compute_top_vehicle() -> Result<TopVehicle, String> {
            use polars::chunked_array::ops::SortMultipleOptions;
            let mut stat = vehicle_stat();

            let head = stat
              .sort(["speed"], SortMultipleOptions::default().with_order_descendings([true,false]))
              .map_err(|e| e.to_string())?
              .head(Some(5));
            let shape = head.shape();

            
            let mut top_vehicles = vec![];
            for i in 0..shape.0 {
              let vehicle = head
                .column("id").map_err(|e| e.to_string())?
                .str().map_err(|e| e.to_string())?
                .get(i).ok_or("failed to get id")?
                .to_string();

              let speed = head
                .column("speed").map_err(|e| e.to_string())?
                .f64().map_err(|e| e.to_string())?
                .get(i).ok_or("failed to get speed")?;

            
              top_vehicles.push(VpStat {
                vehicle,
                speed
              });
            }
            
            Ok(top_vehicles)

          }
    sinks:
      - type: topic
        id: top-vehicle
